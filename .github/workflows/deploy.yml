name: Deploy
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_call:
    inputs:
      image_version:
        description: Docker Image Version
        required: true
        type: string


  workflow_dispatch:
    inputs:
      image_version:
        description: Docker Image Version
        required: true
        type: string


env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GITHUB_TOKEN: ${{ secrets.MY_GITHUB_PAT }}

jobs:
  enviromentselection:
    name: Set Enviroment
    runs-on: ubuntu-latest
    outputs:
      enviroment: ${{ steps.enviroment.outputs.enviroment }}
    
    steps:
      - uses: actions/checkout@v4
      - name: Set Enviroment
        id: enviroment
        run: |
          BRANCH_NAME=""
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BRANCH_NAME=${{ github.base_ref }}
          else
            BRANCH_NAME=${{ github.ref }}
          fi

          if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "refs/heads/main" ]]; then
            echo "enviroment=production" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" == "develop" || "$BRANCH_NAME" == "refs/heads/develop" ]]; then
            echo "enviroment=development" >> $GITHUB_OUTPUT
          else 
            echo "Unknown branch name: $BRANCH_NAME"
            exit 1
          fi
        shell: bash

  
  deploydev:
    needs: enviromentselection
    name: Deploy to dev
    runs-on: ubuntu-latest
    environment: ${{ needs.enviromentselection.outputs.enviroment }}
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to develop
        if: ${{ needs.enviromentselection.outputs.enviroment }} == development
        run: echo "environment=${{ needs.enviromentselection.outputs.enviroment }}"

      - name: Set up Kubeconfig for DEV
        run: |
          if [[ ${{ needs.enviromentselection.outputs.enviroment }} == development ]]; then
            echo "environment=${{ needs.enviromentselection.outputs.enviroment }}"
            # mkdir -p $HOME/.kube
            # echo "${{ secrets.KUBE_CONFIG_DEV }}" > $HOME/.kube/config
            # chmod 600 $HOME/.kube/config
          else
            echo "prod"
            # mkdir -p $HOME/.kube
            # echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
            # chmod 600 $HOME/.kube/config
          fi

      # - name: Set up Kubeconfig for Prod
      #   if: github.ref == 'refs/heads/main' && environment=production
      #   run: |
      #     mkdir -p $HOME/.kube
      #     echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
      #     chmod 600 $HOME/.kube/config

      # - name: Install Helm
      #   run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # - name: Helm Login
      #   run: echo ${{ secrets.GITHUB_TOKEN }} | helm registry login ${{ env.REGISTRY }} -u a-savinski  --password-stdin

      - name: Set up Variables
        run: |
          export SHA=$(echo $(($RANDOM%(9999999-1000000+1)+1000000)))
          echo "VERSION=$(echo ${{ inputs.image_version }}-$SHA)" >> $GITHUB_ENV
          export REPO=$(echo ${IMAGE_NAME,,})
          echo "REPO_NAME=$(echo $REPO | awk -F'/' '{print $1}')" >> $GITHUB_ENV
          echo "SERVICE_NAME=$(echo $REPO | awk -F'/' '{print $NF}' | cut -d'-' -f2)" >> $GITHUB_ENV

      # - name: Chart Packaging
      #   run: helm package ./chart/ --version ${{ env.VERSION }}

      # - name: Push Helm Package
      #   run: helm push *-${{ env.VERSION }}.tgz oci://${{ env.REGISTRY }}/${{ env.REPO_NAME }}/helm

      # # after ci pipeline the container registry need some time to show container images
      # - name: Wait for 30 seconds
      #   run: sleep 30

      # - name: Helm Upgrade
      #   run: helm upgrade --install --namespace ${{ inputs.environment }} --set image.tag=${{ inputs.image_version }} --version ${{ env.VERSION }} ${{ env.SERVICE_NAME }} oci://${{ env.REGISTRY }}/${{ env.REPO_NAME }}/helm/${{ env.SERVICE_NAME }}

      # - name: Deploy Results
      #   run: |
      #     echo Deployed Docker Image: ${{ inputs.image_version }}
      #     echo Helm Chart: ${{ env.VERSION }}